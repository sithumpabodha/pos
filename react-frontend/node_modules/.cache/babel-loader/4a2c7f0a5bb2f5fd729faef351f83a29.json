{"ast":null,"code":"import apiConfig from\"../../config/apiConfig\";import{apiBaseURL,brandsActionType,toastType}from\"../../constants\";import requestParam from\"../../shared/requestParam\";import{addToast}from\"./toastAction\";import{addInToTotalRecord,setTotalRecord,removeFromTotalRecord}from\"./totalRecordAction\";import{setLoading}from\"./loadingAction\";import{getFormattedMessage}from\"../../shared/sharedMethod\";import{callUpdateBrandApi}from\"./updateBrand\";export const fetchBrands=function(){let filter=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};let isLoading=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;return async dispatch=>{if(isLoading){dispatch(setLoading(true));}let url=apiBaseURL.BRANDS;if(!_.isEmpty(filter)&&(filter.page||filter.pageSize||filter.search||filter.order_By||filter.created_at)){url+=requestParam(filter,null,null,null,url);}apiConfig.get(url).then(response=>{dispatch({type:brandsActionType.FETCH_BRANDS,payload:response.data.data});dispatch(setTotalRecord(response.data.meta.total!==undefined&&response.data.meta.total>=0?response.data.meta.total:response.data.data.total));if(isLoading){dispatch(setLoading(false));}}).catch(_ref=>{let{response}=_ref;dispatch(addToast({text:response.data.message,type:toastType.ERROR}));});};};export const fetchBrand=(brandsId,singleUser)=>async dispatch=>{apiConfig.get(apiBaseURL.BRANDS+\"/\"+brandsId,singleUser).then(response=>{dispatch({type:brandsActionType.FETCH_BRAND,payload:response.data.data});}).catch(_ref2=>{let{response}=_ref2;dispatch(addToast({text:response.data.message,type:toastType.ERROR}));});};export const addBrand=brands=>async dispatch=>{await apiConfig.post(apiBaseURL.BRANDS,brands).then(response=>{dispatch({type:brandsActionType.ADD_BRANDS,payload:response.data.data});dispatch(addToast({text:getFormattedMessage(\"brand.success.create.message\")}));dispatch(addInToTotalRecord(1));}).catch(_ref3=>{let{response}=_ref3;dispatch(addToast({text:response.data.message,type:toastType.ERROR}));});};export const editBrand=(brandsId,brands,handleClose)=>async dispatch=>{apiConfig.post(apiBaseURL.BRANDS+\"/\"+brandsId,brands).then(response=>{dispatch(callUpdateBrandApi(true));// dispatch({type: productActionType.ADD_IMPORT_PRODUCT, payload: response.data.data});\nhandleClose(false);dispatch(addToast({text:getFormattedMessage(\"brand.success.edit.message\")}));dispatch(addInToTotalRecord(1));}).catch(_ref4=>{let{response}=_ref4;dispatch(addToast({text:response.data.message,type:toastType.ERROR}));});};export const deleteBrand=brandsId=>async dispatch=>{apiConfig.delete(apiBaseURL.BRANDS+\"/\"+brandsId).then(response=>{dispatch(removeFromTotalRecord(1));dispatch({type:brandsActionType.DELETE_BRANDS,payload:brandsId});dispatch(addToast({text:getFormattedMessage(\"brand.success.delete.message\")}));}).catch(_ref5=>{let{response}=_ref5;dispatch(addToast({text:response.data.message,type:toastType.ERROR}));});};export const fetchAllBrands=()=>async dispatch=>{apiConfig.get(`brands?page[size]=0`).then(response=>{dispatch({type:brandsActionType.FETCH_ALL_BRANDS,payload:response.data.data});}).catch(_ref6=>{let{response}=_ref6;dispatch(addToast({text:response.data.message,type:toastType.ERROR}));});};","map":{"version":3,"names":["apiConfig","apiBaseURL","brandsActionType","toastType","requestParam","addToast","addInToTotalRecord","setTotalRecord","removeFromTotalRecord","setLoading","getFormattedMessage","callUpdateBrandApi","fetchBrands","filter","arguments","length","undefined","isLoading","dispatch","url","BRANDS","_","isEmpty","page","pageSize","search","order_By","created_at","get","then","response","type","FETCH_BRANDS","payload","data","meta","total","catch","_ref","text","message","ERROR","fetchBrand","brandsId","singleUser","FETCH_BRAND","_ref2","addBrand","brands","post","ADD_BRANDS","_ref3","editBrand","handleClose","_ref4","deleteBrand","delete","DELETE_BRANDS","_ref5","fetchAllBrands","FETCH_ALL_BRANDS","_ref6"],"sources":["C:/Users/Sithu/Music/react-frontend/src/store/action/brandsAction.js"],"sourcesContent":["import apiConfig from \"../../config/apiConfig\";\nimport { apiBaseURL, brandsActionType, toastType } from \"../../constants\";\nimport requestParam from \"../../shared/requestParam\";\nimport { addToast } from \"./toastAction\";\nimport {\n    addInToTotalRecord,\n    setTotalRecord,\n    removeFromTotalRecord,\n} from \"./totalRecordAction\";\nimport { setLoading } from \"./loadingAction\";\nimport { getFormattedMessage } from \"../../shared/sharedMethod\";\nimport { callUpdateBrandApi } from \"./updateBrand\";\n\nexport const fetchBrands =\n    (filter = {}, isLoading = true) =>\n    async (dispatch) => {\n        if (isLoading) {\n            dispatch(setLoading(true));\n        }\n        let url = apiBaseURL.BRANDS;\n        if (\n            !_.isEmpty(filter) &&\n            (filter.page ||\n                filter.pageSize ||\n                filter.search ||\n                filter.order_By ||\n                filter.created_at)\n        ) {\n            url += requestParam(filter, null, null, null, url);\n        }\n        apiConfig\n            .get(url)\n            .then((response) => {\n                dispatch({\n                    type: brandsActionType.FETCH_BRANDS,\n                    payload: response.data.data,\n                });\n                dispatch(\n                    setTotalRecord(\n                        response.data.meta.total !== undefined &&\n                            response.data.meta.total >= 0\n                            ? response.data.meta.total\n                            : response.data.data.total\n                    )\n                );\n                if (isLoading) {\n                    dispatch(setLoading(false));\n                }\n            })\n            .catch(({ response }) => {\n                dispatch(\n                    addToast({\n                        text: response.data.message,\n                        type: toastType.ERROR,\n                    })\n                );\n            });\n    };\n\nexport const fetchBrand = (brandsId, singleUser) => async (dispatch) => {\n    apiConfig\n        .get(apiBaseURL.BRANDS + \"/\" + brandsId, singleUser)\n        .then((response) => {\n            dispatch({\n                type: brandsActionType.FETCH_BRAND,\n                payload: response.data.data,\n            });\n        })\n        .catch(({ response }) => {\n            dispatch(\n                addToast({ text: response.data.message, type: toastType.ERROR })\n            );\n        });\n};\n\nexport const addBrand = (brands) => async (dispatch) => {\n    await apiConfig\n        .post(apiBaseURL.BRANDS, brands)\n        .then((response) => {\n            dispatch({\n                type: brandsActionType.ADD_BRANDS,\n                payload: response.data.data,\n            });\n            dispatch(\n                addToast({\n                    text: getFormattedMessage(\"brand.success.create.message\"),\n                })\n            );\n            dispatch(addInToTotalRecord(1));\n        })\n        .catch(({ response }) => {\n            dispatch(\n                addToast({ text: response.data.message, type: toastType.ERROR })\n            );\n        });\n};\n\nexport const editBrand =\n    (brandsId, brands, handleClose) => async (dispatch) => {\n        apiConfig\n            .post(apiBaseURL.BRANDS + \"/\" + brandsId, brands)\n            .then((response) => {\n                dispatch(callUpdateBrandApi(true));\n                // dispatch({type: productActionType.ADD_IMPORT_PRODUCT, payload: response.data.data});\n                handleClose(false);\n                dispatch(\n                    addToast({\n                        text: getFormattedMessage(\"brand.success.edit.message\"),\n                    })\n                );\n                dispatch(addInToTotalRecord(1));\n            })\n            .catch(({ response }) => {\n                dispatch(\n                    addToast({\n                        text: response.data.message,\n                        type: toastType.ERROR,\n                    })\n                );\n            });\n    };\n\nexport const deleteBrand = (brandsId) => async (dispatch) => {\n    apiConfig\n        .delete(apiBaseURL.BRANDS + \"/\" + brandsId)\n        .then((response) => {\n            dispatch(removeFromTotalRecord(1));\n            dispatch({\n                type: brandsActionType.DELETE_BRANDS,\n                payload: brandsId,\n            });\n            dispatch(\n                addToast({\n                    text: getFormattedMessage(\"brand.success.delete.message\"),\n                })\n            );\n        })\n        .catch(({ response }) => {\n            dispatch(\n                addToast({ text: response.data.message, type: toastType.ERROR })\n            );\n        });\n};\n\nexport const fetchAllBrands = () => async (dispatch) => {\n    apiConfig\n        .get(`brands?page[size]=0`)\n        .then((response) => {\n            dispatch({\n                type: brandsActionType.FETCH_ALL_BRANDS,\n                payload: response.data.data,\n            });\n        })\n        .catch(({ response }) => {\n            dispatch(\n                addToast({ text: response.data.message, type: toastType.ERROR })\n            );\n        });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}