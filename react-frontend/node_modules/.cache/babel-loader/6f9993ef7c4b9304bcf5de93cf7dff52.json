{"ast":null,"code":"import apiConfig from\"../../config/apiConfig\";import{apiBaseURL,quotationActionType,toastType}from\"../../constants\";import{addToast}from\"./toastAction\";import{addInToTotalRecord,removeFromTotalRecord,setTotalRecord}from\"./totalRecordAction\";import{setLoading}from\"./loadingAction\";import requestParam from\"../../shared/requestParam\";import{getFormattedMessage}from\"../../shared/sharedMethod\";import{callSaleApi}from\"./saleApiAction\";import{setSavingButton}from\"./saveButtonAction\";export const fetchQuotations=function(){let filter=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};let isLoading=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;return async dispatch=>{if(isLoading){dispatch(setLoading(true));}const admin=true;let url=apiBaseURL.QUOTATIONS;if(!_.isEmpty(filter)&&(filter.page||filter.pageSize||filter.search||filter.order_By||filter.created_at)){url+=requestParam(filter,admin,null,null,url);}await apiConfig.get(url).then(response=>{dispatch({type:quotationActionType.FETCH_QUOTATIONS,payload:response.data.data});dispatch(setTotalRecord(response.data.meta.total!==undefined&&response.data.meta.total>=0?response.data.meta.total:response.data.data.total));dispatch(callSaleApi(false));if(isLoading){dispatch(setLoading(false));}}).catch(response=>{dispatch(addToast({text:response.response.data.message,type:toastType.ERROR}));});};};export const fetchQuotation=function(quotationId,singleQuotation){let isLoading=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;return async dispatch=>{if(isLoading){dispatch(setLoading(true));}await apiConfig.get(apiBaseURL.QUOTATIONS+\"/\"+quotationId+\"/edit\",singleQuotation).then(response=>{dispatch({type:quotationActionType.FETCH_QUOTATION,payload:response.data.data});if(isLoading){dispatch(setLoading(false));}}).catch(_ref=>{let{response}=_ref;response&&dispatch(addToast({text:response.data.message,type:toastType.ERROR}));});};};export const addQuotation=(quotation,navigate)=>async dispatch=>{dispatch(setSavingButton(true));await apiConfig.post(apiBaseURL.QUOTATIONS,quotation).then(response=>{dispatch({type:quotationActionType.ADD_QUOTATION,payload:response.data.data});dispatch(addToast({text:getFormattedMessage(\"quotation.success.create.message\")}));dispatch(addInToTotalRecord(1));navigate(\"/app/quotations\");dispatch(setSavingButton(false));}).catch(_ref2=>{let{response}=_ref2;dispatch(setSavingButton(false));response&&dispatch(addToast({text:response.data.message,type:toastType.ERROR}));});};export const editQuotation=(quotationId,quotation,navigate)=>async dispatch=>{dispatch(setSavingButton(true));await apiConfig.patch(apiBaseURL.QUOTATIONS+\"/\"+quotationId,quotation).then(response=>{dispatch(addToast({text:getFormattedMessage(\"quotation.success.edit.message\")}));navigate(\"/app/quotations\");dispatch({type:quotationActionType.EDIT_QUOTATION,payload:response.data.data});dispatch(setSavingButton(false));}).catch(_ref3=>{let{response}=_ref3;dispatch(setSavingButton(false));response&&dispatch(addToast({text:response.data.message,type:toastType.ERROR}));});};export const deleteQuotation=userId=>async dispatch=>{await apiConfig.delete(apiBaseURL.QUOTATIONS+\"/\"+userId).then(()=>{dispatch(removeFromTotalRecord(1));dispatch({type:quotationActionType.DELETE_QUOTATION,payload:userId});dispatch(addToast({text:getFormattedMessage(\"quotation.success.delete.message\")}));}).catch(_ref4=>{let{response}=_ref4;response&&dispatch(addToast({text:response.data.message,type:toastType.ERROR}));});};","map":{"version":3,"names":["apiConfig","apiBaseURL","quotationActionType","toastType","addToast","addInToTotalRecord","removeFromTotalRecord","setTotalRecord","setLoading","requestParam","getFormattedMessage","callSaleApi","setSavingButton","fetchQuotations","filter","arguments","length","undefined","isLoading","dispatch","admin","url","QUOTATIONS","_","isEmpty","page","pageSize","search","order_By","created_at","get","then","response","type","FETCH_QUOTATIONS","payload","data","meta","total","catch","text","message","ERROR","fetchQuotation","quotationId","singleQuotation","FETCH_QUOTATION","_ref","addQuotation","quotation","navigate","post","ADD_QUOTATION","_ref2","editQuotation","patch","EDIT_QUOTATION","_ref3","deleteQuotation","userId","delete","DELETE_QUOTATION","_ref4"],"sources":["C:/Users/Sithu/Music/react-frontend/src/store/action/quotationAction.js"],"sourcesContent":["import apiConfig from \"../../config/apiConfig\";\nimport { apiBaseURL, quotationActionType, toastType } from \"../../constants\";\nimport { addToast } from \"./toastAction\";\nimport {\n    addInToTotalRecord,\n    removeFromTotalRecord,\n    setTotalRecord,\n} from \"./totalRecordAction\";\nimport { setLoading } from \"./loadingAction\";\nimport requestParam from \"../../shared/requestParam\";\nimport { getFormattedMessage } from \"../../shared/sharedMethod\";\nimport { callSaleApi } from \"./saleApiAction\";\nimport { setSavingButton } from \"./saveButtonAction\";\n\nexport const fetchQuotations =\n    (filter = {}, isLoading = true) =>\n    async (dispatch) => {\n        if (isLoading) {\n            dispatch(setLoading(true));\n        }\n        const admin = true;\n        let url = apiBaseURL.QUOTATIONS;\n        if (\n            !_.isEmpty(filter) &&\n            (filter.page ||\n                filter.pageSize ||\n                filter.search ||\n                filter.order_By ||\n                filter.created_at)\n        ) {\n            url += requestParam(filter, admin, null, null, url);\n        }\n        await apiConfig\n            .get(url)\n            .then((response) => {\n                dispatch({\n                    type: quotationActionType.FETCH_QUOTATIONS,\n                    payload: response.data.data,\n                });\n                dispatch(\n                    setTotalRecord(\n                        response.data.meta.total !== undefined &&\n                            response.data.meta.total >= 0\n                            ? response.data.meta.total\n                            : response.data.data.total\n                    )\n                );\n                dispatch(callSaleApi(false));\n                if (isLoading) {\n                    dispatch(setLoading(false));\n                }\n            })\n            .catch((response) => {\n                dispatch(\n                    addToast({\n                        text: response.response.data.message,\n                        type: toastType.ERROR,\n                    })\n                );\n            });\n    };\n\nexport const fetchQuotation =\n    (quotationId, singleQuotation, isLoading = true) =>\n    async (dispatch) => {\n        if (isLoading) {\n            dispatch(setLoading(true));\n        }\n        await apiConfig\n            .get(\n                apiBaseURL.QUOTATIONS + \"/\" + quotationId + \"/edit\",\n                singleQuotation\n            )\n            .then((response) => {\n                dispatch({\n                    type: quotationActionType.FETCH_QUOTATION,\n                    payload: response.data.data,\n                });\n                if (isLoading) {\n                    dispatch(setLoading(false));\n                }\n            })\n            .catch(({ response }) => {\n                response &&\n                    dispatch(\n                        addToast({\n                            text: response.data.message,\n                            type: toastType.ERROR,\n                        })\n                    );\n            });\n    };\n\nexport const addQuotation = (quotation, navigate) => async (dispatch) => {\n    dispatch(setSavingButton(true));\n    await apiConfig\n        .post(apiBaseURL.QUOTATIONS, quotation)\n        .then((response) => {\n            dispatch({\n                type: quotationActionType.ADD_QUOTATION,\n                payload: response.data.data,\n            });\n            dispatch(\n                addToast({\n                    text: getFormattedMessage(\n                        \"quotation.success.create.message\"\n                    ),\n                })\n            );\n            dispatch(addInToTotalRecord(1));\n            navigate(\"/app/quotations\");\n            dispatch(setSavingButton(false));\n        })\n        .catch(({ response }) => {\n            dispatch(setSavingButton(false));\n            response &&\n                dispatch(\n                    addToast({\n                        text: response.data.message,\n                        type: toastType.ERROR,\n                    })\n                );\n        });\n};\n\nexport const editQuotation =\n    (quotationId, quotation, navigate) => async (dispatch) => {\n        dispatch(setSavingButton(true));\n        await apiConfig\n            .patch(apiBaseURL.QUOTATIONS + \"/\" + quotationId, quotation)\n            .then((response) => {\n                dispatch(\n                    addToast({\n                        text: getFormattedMessage(\n                            \"quotation.success.edit.message\"\n                        ),\n                    })\n                );\n                navigate(\"/app/quotations\");\n                dispatch({\n                    type: quotationActionType.EDIT_QUOTATION,\n                    payload: response.data.data,\n                });\n                dispatch(setSavingButton(false));\n            })\n            .catch(({ response }) => {\n                dispatch(setSavingButton(false));\n                response &&\n                    dispatch(\n                        addToast({\n                            text: response.data.message,\n                            type: toastType.ERROR,\n                        })\n                    );\n            });\n    };\n\nexport const deleteQuotation = (userId) => async (dispatch) => {\n    await apiConfig\n        .delete(apiBaseURL.QUOTATIONS + \"/\" + userId)\n        .then(() => {\n            dispatch(removeFromTotalRecord(1));\n            dispatch({\n                type: quotationActionType.DELETE_QUOTATION,\n                payload: userId,\n            });\n            dispatch(\n                addToast({\n                    text: getFormattedMessage(\n                        \"quotation.success.delete.message\"\n                    ),\n                })\n            );\n        })\n        .catch(({ response }) => {\n            response &&\n                dispatch(\n                    addToast({\n                        text: response.data.message,\n                        type: toastType.ERROR,\n                    })\n                );\n        });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}