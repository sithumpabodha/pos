{"ast":null,"code":"import React,{memo,useEffect}from'react';import{connect}from'react-redux';import{useParams}from'react-router-dom';import RoleFrom from'./RoleForm';import{fetchRole}from'../../store/action/roleAction';import MasterLayout from'../MasterLayout';import HeaderTitle from'../header/HeaderTitle';import{fetchPermissions}from'../../store/action/permissionAction';import{getFormattedMessage}from\"../../shared/sharedMethod\";import TopProgressBar from\"../../shared/components/loaders/TopProgressBar\";import Spinner from\"../../shared/components/loaders/Spinner\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const EditRole=props=>{const{roles,fetchRole,fetchPermissions,isLoading,permissions}=props;const{id}=useParams();const itemsValue=roles.length===1&&roles.map(role=>({name:role.attributes.name,permissions:role.attributes.permissions}));useEffect(()=>{fetchPermissions();fetchRole(id);},[]);const preparePermissions=(permissions,selectedPermission)=>{let permissionArray=[];permissions.length!==0&&permissions.forEach(permission=>{const perm=selectedPermission&&selectedPermission.find(perm=>perm.id===permission.id);let selected=false;if(perm){selected=true;}permissionArray.push({id:permission.id,name:permission.attributes.display_name,selected,isChecked:selected});});return permissionArray;};const newPermission=roles[0]&&roles[0].attributes&&preparePermissions(permissions,roles[0].attributes.permissions);return/*#__PURE__*/_jsxs(MasterLayout,{children:[/*#__PURE__*/_jsx(TopProgressBar,{}),/*#__PURE__*/_jsx(HeaderTitle,{title:getFormattedMessage(\"role.edit.title\"),to:\"/app/roles\"}),isLoading?/*#__PURE__*/_jsx(Spinner,{}):roles.length===1&&newPermission&&/*#__PURE__*/_jsx(RoleFrom,{singleRole:itemsValue[0],id:id,permissionsArray:newPermission})]});};const mapStateToProps=state=>{const{roles,permissions,isLoading}=state;return{roles,permissions,// newPermission: roles.length === 1 && roles[0] && roles[0].attributes && preparePermissions(permissions, roles[0].attributes.permissions),\nisLoading};};export default connect(mapStateToProps,{fetchRole,fetchPermissions})(/*#__PURE__*/memo(EditRole));","map":{"version":3,"names":["React","memo","useEffect","connect","useParams","RoleFrom","fetchRole","MasterLayout","HeaderTitle","fetchPermissions","getFormattedMessage","TopProgressBar","Spinner","jsx","_jsx","jsxs","_jsxs","EditRole","props","roles","isLoading","permissions","id","itemsValue","length","map","role","name","attributes","preparePermissions","selectedPermission","permissionArray","forEach","permission","perm","find","selected","push","display_name","isChecked","newPermission","children","title","to","singleRole","permissionsArray","mapStateToProps","state"],"sources":["C:/Users/Sithu/Music/react-frontend/src/components/roles/EditRole.js"],"sourcesContent":["import React, {memo, useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport {useParams} from 'react-router-dom';\nimport RoleFrom from './RoleForm';\nimport {fetchRole} from '../../store/action/roleAction';\nimport MasterLayout from '../MasterLayout';\nimport HeaderTitle from '../header/HeaderTitle';\nimport {fetchPermissions} from '../../store/action/permissionAction';\nimport {getFormattedMessage} from \"../../shared/sharedMethod\";\nimport TopProgressBar from \"../../shared/components/loaders/TopProgressBar\";\nimport Spinner from \"../../shared/components/loaders/Spinner\";\n\nconst EditRole = (props) => {\n    const {roles, fetchRole, fetchPermissions, isLoading, permissions} = props;\n    const {id} = useParams();\n\n    const itemsValue = roles.length === 1 && roles.map((role) => ({\n        name: role.attributes.name,\n        permissions: role.attributes.permissions\n    }));\n\n    useEffect(() => {\n        fetchPermissions();\n        fetchRole(id)\n    }, []);\n\n    const preparePermissions = (permissions, selectedPermission) => {\n        let permissionArray = [];\n        permissions.length !== 0 && permissions.forEach(permission => {\n            const perm = selectedPermission && selectedPermission.find(perm => perm.id === permission.id);\n            let selected = false;\n            if (perm) {\n                selected = true;\n            }\n            permissionArray.push({\n                id: permission.id,\n                name: permission.attributes.display_name,\n                selected,\n                isChecked: selected\n            })\n        });\n        return permissionArray;\n    };\n\n    const newPermission = roles[0] && roles[0].attributes && preparePermissions(permissions, roles[0].attributes.permissions)\n\n    return (\n        <MasterLayout>\n            <TopProgressBar/>\n            <HeaderTitle title={getFormattedMessage(\"role.edit.title\")} to='/app/roles'/>\n            {isLoading ? <Spinner />:\n                roles.length === 1 && newPermission && <RoleFrom singleRole={itemsValue[0]} id={id} permissionsArray={newPermission}/>\n            }\n        </MasterLayout>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    const {roles, permissions, isLoading} = state;\n    return {\n        roles,\n        permissions,\n        // newPermission: roles.length === 1 && roles[0] && roles[0].attributes && preparePermissions(permissions, roles[0].attributes.permissions),\n        isLoading\n    }\n};\n\nexport default connect(mapStateToProps, {fetchRole, fetchPermissions})(memo(EditRole));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}