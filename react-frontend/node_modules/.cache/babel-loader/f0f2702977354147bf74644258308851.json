{"ast":null,"code":"import apiConfig from'../../config/apiConfig';import{apiBaseURL,frontSettingActionType,toastType}from'../../constants';import{addToast}from'./toastAction';export const fetchFrontSetting=()=>async dispatch=>{apiConfig.get(apiBaseURL.FRONT_SETTING).then(response=>{dispatch({type:frontSettingActionType.FETCH_FRONT_SETTING,payload:response.data.data});}).catch(_ref=>{let{response}=_ref;dispatch(addToast({text:response.data.message,type:toastType.ERROR}));});};","map":{"version":3,"names":["apiConfig","apiBaseURL","frontSettingActionType","toastType","addToast","fetchFrontSetting","dispatch","get","FRONT_SETTING","then","response","type","FETCH_FRONT_SETTING","payload","data","catch","_ref","text","message","ERROR"],"sources":["C:/Users/Sithu/Music/react-frontend/src/store/action/frontSettingAction.js"],"sourcesContent":["import apiConfig from '../../config/apiConfig';\nimport { apiBaseURL, frontSettingActionType, toastType } from '../../constants';\nimport { addToast } from './toastAction';\n\nexport const fetchFrontSetting = () => async ( dispatch ) => {\n    apiConfig.get( apiBaseURL.FRONT_SETTING )\n        .then( ( response ) => {\n            dispatch( { type: frontSettingActionType.FETCH_FRONT_SETTING, payload: response.data.data } );\n        } )\n        .catch( ( { response } ) => {\n            dispatch( addToast(\n                { text: response.data.message, type: toastType.ERROR } ) );\n        } );\n}\n"],"mappings":"AAAA,MAAO,CAAAA,SAAS,KAAM,wBAAwB,CAC9C,OAASC,UAAU,CAAEC,sBAAsB,CAAEC,SAAS,KAAQ,iBAAiB,CAC/E,OAASC,QAAQ,KAAQ,eAAe,CAExC,MAAO,MAAM,CAAAC,iBAAiB,CAAGA,CAAA,GAAM,KAAQ,CAAAC,QAAQ,EAAM,CACzDN,SAAS,CAACO,GAAG,CAAEN,UAAU,CAACO,aAAc,CAAC,CACpCC,IAAI,CAAIC,QAAQ,EAAM,CACnBJ,QAAQ,CAAE,CAAEK,IAAI,CAAET,sBAAsB,CAACU,mBAAmB,CAAEC,OAAO,CAAEH,QAAQ,CAACI,IAAI,CAACA,IAAK,CAAE,CAAC,CACjG,CAAE,CAAC,CACFC,KAAK,CAAEC,IAAA,EAAoB,IAAlB,CAAEN,QAAS,CAAC,CAAAM,IAAA,CAClBV,QAAQ,CAAEF,QAAQ,CACd,CAAEa,IAAI,CAAEP,QAAQ,CAACI,IAAI,CAACI,OAAO,CAAEP,IAAI,CAAER,SAAS,CAACgB,KAAM,CAAE,CAAE,CAAC,CAClE,CAAE,CAAC,CACX,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}