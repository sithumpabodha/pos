{"ast":null,"code":"import{apiBaseURL,settingActionType,toastType}from\"../../constants\";import requestParam from\"../../shared/requestParam\";import apiConfig from\"../../config/apiConfig\";import{addToast}from\"./toastAction\";import{setLoading}from\"./loadingAction\";import{getFormattedMessage}from\"../../shared/sharedMethod\";import{fetchConfig}from\"./configAction\";import{setDateFormat}from\"./dateFormatAction\";import{setDefaultCountry}from\"../defaultCountryAction\";import{fetchFrontSetting}from\"./frontSettingAction\";export const fetchSetting=function(){let filter=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};let isLoading=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;return async dispatch=>{if(isLoading){dispatch(setLoading(true));}let url=apiBaseURL.SETTINGS;if(!_.isEmpty(filter)&&(filter.page||filter.pageSize)){url+=requestParam(filter,null,null,null,url);}apiConfig.get(url).then(response=>{dispatch({type:settingActionType.FETCH_SETTING,payload:response.data.data});if(isLoading){dispatch(setLoading(false));}response&&dispatch(setDateFormat(response.data.data.attributes.date_format));response&&dispatch(setDefaultCountry({countries:response.data.data.attributes.countries,country:response.data.data.attributes.country}));}).catch(_ref=>{let{response}=_ref;dispatch(addToast({text:response.data.message,type:toastType.ERROR}));});};};export const editSetting=function(setting){let isLoading=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;let setDefaultDate=arguments.length>2?arguments[2]:undefined;return async dispatch=>{if(isLoading){dispatch(setLoading(true));}apiConfig.post(apiBaseURL.SETTINGS,setting).then(response=>{// dispatch({type: settingActionType.EDIT_SETTINGS, payload: response.data.data});\ndispatch(addToast({text:getFormattedMessage(\"settings.success.edit.message\")}));dispatch(fetchConfig());dispatch(fetchFrontSetting());if(isLoading){dispatch(setLoading(false));}response&&dispatch(setDateFormat(response.data.data.attributes.date_format));response&&dispatch(setDefaultCountry({countries:response.data.data.attributes.countries,country:response.data.data.attributes.country}));response&&dispatch(fetchSetting());}).catch(_ref2=>{let{response}=_ref2;dispatch(addToast({text:response.data.message,type:toastType.ERROR}));if(isLoading){dispatch(setLoading(false));}});};};export const fetchCacheClear=()=>async dispatch=>{apiConfig.get(apiBaseURL.CACHE_CLEAR).then(response=>{dispatch({type:settingActionType.FETCH_CACHE_CLEAR,payload:response.data.message});dispatch(addToast({text:getFormattedMessage(\"settings.clear-cache.success.message\")}));window.location.reload();}).catch(_ref3=>{let{response}=_ref3;dispatch(addToast({text:response.data.message,type:toastType.ERROR}));});};export const fetchState=id=>async dispatch=>{apiConfig.get(\"states/\"+id).then(response=>{dispatch({type:\"FETCH_STATE_DATA\",payload:response.data.data});}).catch(_ref4=>{let{response}=_ref4;dispatch(addToast({text:response.data.message,type:toastType.ERROR}));});};","map":{"version":3,"names":["apiBaseURL","settingActionType","toastType","requestParam","apiConfig","addToast","setLoading","getFormattedMessage","fetchConfig","setDateFormat","setDefaultCountry","fetchFrontSetting","fetchSetting","filter","arguments","length","undefined","isLoading","dispatch","url","SETTINGS","_","isEmpty","page","pageSize","get","then","response","type","FETCH_SETTING","payload","data","attributes","date_format","countries","country","catch","_ref","text","message","ERROR","editSetting","setting","setDefaultDate","post","_ref2","fetchCacheClear","CACHE_CLEAR","FETCH_CACHE_CLEAR","window","location","reload","_ref3","fetchState","id","_ref4"],"sources":["C:/Users/Sithu/Music/react-frontend/src/store/action/settingAction.js"],"sourcesContent":["import { apiBaseURL, settingActionType, toastType } from \"../../constants\";\nimport requestParam from \"../../shared/requestParam\";\nimport apiConfig from \"../../config/apiConfig\";\nimport { addToast } from \"./toastAction\";\nimport { setLoading } from \"./loadingAction\";\nimport { getFormattedMessage } from \"../../shared/sharedMethod\";\nimport { fetchConfig } from \"./configAction\";\nimport { setDateFormat } from \"./dateFormatAction\";\nimport { setDefaultCountry } from \"../defaultCountryAction\";\nimport { fetchFrontSetting } from \"./frontSettingAction\";\n\nexport const fetchSetting =\n    (filter = {}, isLoading = true) =>\n    async (dispatch) => {\n        if (isLoading) {\n            dispatch(setLoading(true));\n        }\n        let url = apiBaseURL.SETTINGS;\n        if (!_.isEmpty(filter) && (filter.page || filter.pageSize)) {\n            url += requestParam(filter, null, null, null, url);\n        }\n        apiConfig\n            .get(url)\n            .then((response) => {\n                dispatch({\n                    type: settingActionType.FETCH_SETTING,\n                    payload: response.data.data,\n                });\n                if (isLoading) {\n                    dispatch(setLoading(false));\n                }\n                response &&\n                    dispatch(\n                        setDateFormat(response.data.data.attributes.date_format)\n                    );\n                response &&\n                    dispatch(\n                        setDefaultCountry({\n                            countries: response.data.data.attributes.countries,\n                            country: response.data.data.attributes.country,\n                        })\n                    );\n            })\n            .catch(({ response }) => {\n                dispatch(\n                    addToast({\n                        text: response.data.message,\n                        type: toastType.ERROR,\n                    })\n                );\n            });\n    };\n\nexport const editSetting =\n    (setting, isLoading = true, setDefaultDate) =>\n    async (dispatch) => {\n        if (isLoading) {\n            dispatch(setLoading(true));\n        }\n        apiConfig\n            .post(apiBaseURL.SETTINGS, setting)\n            .then((response) => {\n                // dispatch({type: settingActionType.EDIT_SETTINGS, payload: response.data.data});\n                dispatch(\n                    addToast({\n                        text: getFormattedMessage(\n                            \"settings.success.edit.message\"\n                        ),\n                    })\n                );\n                dispatch(fetchConfig());\n                dispatch(fetchFrontSetting());\n                if (isLoading) {\n                    dispatch(setLoading(false));\n                }\n                response &&\n                    dispatch(\n                        setDateFormat(response.data.data.attributes.date_format)\n                    );\n                response &&\n                    dispatch(\n                        setDefaultCountry({\n                            countries: response.data.data.attributes.countries,\n                            country: response.data.data.attributes.country,\n                        })\n                    );\n                response && dispatch(fetchSetting());\n            })\n            .catch(({ response }) => {\n                dispatch(\n                    addToast({\n                        text: response.data.message,\n                        type: toastType.ERROR,\n                    })\n                );\n                if (isLoading) {\n                    dispatch(setLoading(false));\n                }\n            });\n    };\n\nexport const fetchCacheClear = () => async (dispatch) => {\n    apiConfig\n        .get(apiBaseURL.CACHE_CLEAR)\n        .then((response) => {\n            dispatch({\n                type: settingActionType.FETCH_CACHE_CLEAR,\n                payload: response.data.message,\n            });\n            dispatch(\n                addToast({\n                    text: getFormattedMessage(\n                        \"settings.clear-cache.success.message\"\n                    ),\n                })\n            );\n            window.location.reload();\n        })\n        .catch(({ response }) => {\n            dispatch(\n                addToast({ text: response.data.message, type: toastType.ERROR })\n            );\n        });\n};\n\nexport const fetchState = (id) => async (dispatch) => {\n    apiConfig\n        .get(\"states/\" + id)\n        .then((response) => {\n            dispatch({ type: \"FETCH_STATE_DATA\", payload: response.data.data });\n        })\n        .catch(({ response }) => {\n            dispatch(\n                addToast({ text: response.data.message, type: toastType.ERROR })\n            );\n        });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}